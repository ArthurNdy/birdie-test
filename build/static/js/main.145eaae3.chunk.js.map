{"version":3,"sources":["components/tsx/TableComponent.tsx","birdie.svg","components/tsx/HeaderComponent.tsx","components/tsx/TitleComponent.tsx","components/tsx/AlertsTableComponent.tsx","components/tsx/AlertCardComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CleanDetails","payload_as_text","payload","JSON","parse","payload_ls","medication_type","expected_dose_timestamp","alert_severity","severity","note","fluid","observed","consumed_volume_ml","pad_condition","type","rrule","dose_size","medication_failure_reason","mood","valid_details","i","undefined","TableComponent","props","useState","dailyList","setDailyList","useEffect","Axios","get","then","response","date","data","setDate","timestamp","Date","substring","length","split","toDateString","id","className","scope","map","time","toTimeString","event","event_type","replace","HeaderComponent","href","src","birdie","width","height","alt","onClick","setShowAlerts","showAlerts","nbAlerts","TitleComponent","AlertsTableComponent","alertsList","setAlertsList","setNbAlerts","AlertCardComponent","App","displayCard","style","display","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.145eaae3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/TableComponent.css\";\nimport Axios from \"axios\";\n\ninterface Props {\n  setDate: React.Dispatch<React.SetStateAction<string>>;\n}\n\n//Clean the full date from the sql table to deliver the time \nfunction CleanTime(time: string) {\n  return new Date(time.substring(0, time.length - 1).split(\"+\")[0])\n    .toTimeString()\n    .split(\" \")[0];\n}\n\n//Clean the full date from the sql table to deliver the day\nfunction CleanDate(date: string) {\n  return new Date(\n    date.substring(0, date.length - 1).split(\"+\")[0]\n  ).toDateString();\n}\n\n//Clean the event name from the sql table\nfunction CleanEventType(event: string) {\n  return (\n    event.replace(/_/g, \" \")\n  );\n}\n\n//Clean the payload data from the sql table to deliver the essential details \nfunction CleanDetails(payload_as_text: string) {\n  const payload=JSON.parse(payload_as_text)\n  const payload_ls=[ \n    [\" Medication type: \", payload.medication_type],\n    [\" Date for expected dose: \", payload.expected_dose_timestamp],\n    [\" Alert severity: \", payload.alert_severity],\n    [\" Concern severity: \", payload.severity],\n    [\" Note: \", payload.note],\n    [\" Fluid: \", payload.fluid],\n    [\" Observed: \" ,payload.observed],\n    [\" Consumed volume (ml): \", payload.consumed_volume_ml],\n    [\" Pad Condition: \", payload.pad_condition],\n    [\" Type: \", payload.type],\n    [\" Rule: \", payload.rrule],\n    [\" Dose: \", payload.dose_size],\n    [\" Medication failure reason: \", payload.medication_failure_reason],\n    [\" Mood: \", payload.mood]\n  ]\n  \n  let valid_details=\"\";\n  for (let i in payload_ls) {\n    //Going through all possible details to show only the ones with an input  \n    if (payload_ls[i][1] !== undefined){\n      valid_details += payload_ls[i][0]+payload_ls[i][1]\n    }\n  }\n  \n  return (\n    //Returns the details for each event\n    valid_details\n  );\n}\n\nfunction TableComponent(props: Props) {\n  \n  const [dailyList, setDailyList] = useState([]);\n\n  useEffect(() => {\n    //List of the events of a patient for one day\n    Axios.get(\"http://localhost:8000/daily\").then((response) => {\n      //Set list of the events of a patient for one day\n      setDailyList(response.data);\n      //Set the date to be shown in the title of the page\n      props.setDate(CleanDate(response.data[0].timestamp));\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div id=\"tableContainer\" className=\"tableContainer table-wrapper-scroll-y\">\n      <table className=\"table customTable \">\n        <thead className=\"tableHeader customHeader \">\n          <tr>\n            <th scope=\"col\">Time</th>\n            <th scope=\"col\">Event</th>\n            <th scope=\"col\">Details</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {dailyList.map((data: any) => (\n            <tr>\n              <td>{CleanTime(data.timestamp)}</td>\n              <td>{CleanEventType(data.event_type)}</td>\n              <td>{CleanDetails(data.payload_as_text)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TableComponent;\n","export default __webpack_public_path__ + \"static/media/birdie.23e088a4.svg\";","import React from \"react\";\nimport birdie from \"../../birdie.svg\";\nimport \"../css/HeaderComponent.css\";\n\ninterface Props {\n  showAlerts: boolean;\n  setShowAlerts: React.Dispatch<React.SetStateAction<boolean>>;\n  nbAlerts: number;\n}\n\nfunction HeaderComponent(props: Props) {\n  \n  function HandleClick() {\n    //Handle the click on the \"important events\" button to display or not the alerts card\n    props.setShowAlerts(!props.showAlerts);\n  }\n\n  return (\n    <nav className=\"navbar fixed-top navbar-light\">\n      <div className=\"navbar-brand\">\n        <a href=\"https://www.birdie.care/\">\n          <img\n            id=\"logo\"\n            src={birdie}\n            width=\"35%\"\n            height=\"35%\"\n            className=\"d-inline-block align-center\"\n            alt=\"\"\n          />\n        </a>\n      </div>\n      <button\n        onClick={HandleClick}\n        type=\"button\"\n        className=\"btn btn-warning position-relative\"\n      >\n        Important Events\n        <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\n          {props.nbAlerts}\n        </span>\n      </button>\n    </nav>\n  );\n}\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport \"../css/TitleComponent.css\";\n\n//can be replaced with the name corresponding to the \"care_recipient\" data\nvar patient_name = \"Mr X\";\n\ninterface Props {\n  date: string;\n}\n\nfunction TitleComponent(props: Props) {\n  return (\n    <div className=\"Title\">\n      <h1>\n        Daily events of a {patient_name} on {props.date}\n      </h1>\n    </div>\n  );\n}\n\nexport default TitleComponent;\n","import React, { useEffect, useState } from \"react\";\nimport \"../css/AlertsTableComponent.css\";\nimport Axios from \"axios\";\n\ninterface Props {\n  setNbAlerts: React.Dispatch<React.SetStateAction<number>>;\n}\n\n//Clean the full date from the sql table to deliver the time \nfunction CleanTime(date: string) {\n  return new Date(date.substring(0, date.length - 1).split(\"+\")[0])\n    .toTimeString()\n    .split(\" \")[0];\n}\n\n//Clean the payload data from the sql table to deliver the essential details \nfunction CleanDetails(payload_as_text: string) {\n  const payload=JSON.parse(payload_as_text)\n  const payload_ls=[ \n    [\" Medication type: \", payload.medication_type],\n    [\" Date for expected dose: \", payload.expected_dose_timestamp],\n    [\" Alert severity: \", payload.alert_severity],\n    [\" Concern severity: \", payload.severity],\n    [\" Note: \", payload.note],\n    [\" Fluid: \", payload.fluid],\n    [\" Observed: \" ,payload.observed],\n    [\" Consumed volume (ml): \", payload.consumed_volume_ml],\n    [\" Pad Condition: \", payload.pad_condition],\n    [\" Type: \", payload.type],\n    [\" Rule: \", payload.rrule],\n    [\" Dose: \", payload.dose_size],\n    [\" Medication failure reason: \", payload.medication_failure_reason],\n    [\" Mood: \", payload.mood]\n  ]\n  \n\n  let valid_details=\"\";\n  for (let i in payload_ls) {\n    //Going through all possible details to show only the ones with an input  \n    if (payload_ls[i][1] !== undefined){\n      valid_details += payload_ls[i][0]+payload_ls[i][1]\n    }\n  }\n  \n  return (\n    //Returns the details for each event\n    valid_details\n  );\n}\n\nfunction AlertsTableComponent(props: Props) {\n  const [alertsList, setAlertsList] = useState([]);\n\n  useEffect(() => {\n    //List of the events of a patient for one day\n    Axios.get(\"http://localhost:8000/alerts\").then((response) => {\n      //Set list of the ESSENTIAL events of a patient for one day\n      setAlertsList(response.data);\n      //Set the nb of alerts to be shown on the button\n      props.setNbAlerts(response.data.length);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div id=\"alertTable\" className=\"tableContainer table-wrapper-scroll-y\">\n      <table className=\"table customTable \">\n        <thead className=\"tableHeader customHeader \">\n          <tr>\n            <th scope=\"col\">Time</th>\n            <th scope=\"col\">Event</th>\n            <th scope=\"col\">Details</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {alertsList.map((data: any) => (\n            <tr>\n              <td>{CleanTime(data.timestamp)}</td>\n              <td>{data.event_type.replace(/_/g, \" \")}</td>\n              <td>{CleanDetails(data.payload_as_text)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default AlertsTableComponent;\n","import React from \"react\";\nimport \"../css/AlertCardComponent.css\";\nimport AlertsTableComponent from \"./AlertsTableComponent\";\n\ninterface Props {\n  setNbAlerts: React.Dispatch<React.SetStateAction<number>>;\n}\n\n//Card is displayed when we click on the \"important events\" button\nfunction AlertCardComponent(props: Props) {\n  return (\n    <div className=\"card\">\n      <h1 className=\"card-title\">Important Events</h1>\n      <div className=\"card-body\">\n        <AlertsTableComponent setNbAlerts={props.setNbAlerts} />\n      </div>\n    </div>\n  );\n}\n\nexport default AlertCardComponent;\n","import React, { useState } from \"react\";\nimport TableComponent from \"./components/tsx/TableComponent\";\nimport HeaderComponent from \"./components/tsx/HeaderComponent\";\nimport TitleComponent from \"./components/tsx/TitleComponent\";\nimport \"./App.css\";\nimport AlertCardComponent from \"./components/tsx/AlertCardComponent\";\n\nfunction App() {\n  //State to show the alerts card on button click\n  const [showAlerts, setShowAlerts] = useState(false);\n  //State to show the date at the top of the main table\n  const [date, setDate] = useState(\"\");\n  //State to show the nb of alerts on the button\n  const [nbAlerts, setNbAlerts] = useState(0);\n\n  var displayCard: string;\n  \n  if (showAlerts === false) {\n    displayCard = \"none\";\n  } else {\n    displayCard = \"block\";\n  }\n\n  return (\n    <div className=\"AppContainer\">\n      <HeaderComponent\n        nbAlerts={nbAlerts}\n        showAlerts={showAlerts}\n        setShowAlerts={setShowAlerts}\n      />\n      <TitleComponent date={date} />\n      <div style={{ display: displayCard }}>\n        <AlertCardComponent setNbAlerts={setNbAlerts} />\n      </div>\n      <div className=\"AppContent\">\n        <div className=\"AppMainTable\">\n          <TableComponent setDate={setDate} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}